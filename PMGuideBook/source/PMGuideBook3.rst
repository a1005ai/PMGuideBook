3. 要求仕様書の作成
====================

要求仕様書作成工程では、顧客の要求を抽出・分析し、要求仕様として文書化します。しっかりと顧客の要求を抽出・分析することで、要求の抜け漏れや不確定要素をなくし、顧客との合意文書として要求を記録しておくことが目的です。
要求仕様書の作成は、以下のようなプロセスから成っています。

要求抽出
顧客の要望、現状の問題点、経営課題などから要求を抽出します。

要求分析
抽出した要求を分類し、要求間の関係の明確化、必要性・実現可能性などの確認を行います。

合意形成
要求分析の結果について、顧客との合意を形成します。

要求の仕様化
要求を仕様化し、顧客が理解できるように文書化します。

試験計画の作成
要求仕様から試験すべき内容を洗い出し、試験計画を作成します。

要求仕様の確定
要求仕様書と試験計画を顧客に提示して合意を形成し、要求仕様を確定します。


3-1. 要求抽出
要求抽出では、顧客の要望、現状の問題点、経営課題などをもとに、要求を抽出します。
要求抽出は以下のように進めます(実際には、上から順に１つ１つ行うのではなく、これらを何度も繰り返しながら徐々に要求抽出を行っていくことになります)。

3-1-1. 経営目標の明確化
システム化の対象領域を明らかにするため、顧客のビジネス上の戦略的、戦術的な目標を明確化します。

3-1-2. 組織構造の明確化
顧客の経営目標を実現する上での運用プロセスに関する要求を明らかにするため、顧客のビジネスに関する組織や組織間の連携について明確化します。

3-1-3. 関係者の明確化
組織ごとに適切な関係者を特定し、要求に係わる関係者を明確化します。

3-1-4. 要求の明確化
関係者から要求を抽出し、組織の要求、運用プロセスの要求、ソフトウェアが実行する機能に対する要求、性能面、コスト面、セキュリティ面などからの機能に対する制約条件を明確化します。


3-2. 要求分析
要求分析では、抽出した要求を分類し、要求間の関係の明確化、必要性・実現可能性などの確認を行います。
要求抽出は以下のように進めます。

3-2-1. 要求の分類
以下のような観点で要求を分類します。

優先度
要求がどの程度必要とされているかという観点で、必須、強く望ましい、望ましい、任意に分類します。優先度を明確にしておくことで、要求間に競合があった場合にどの要求を優先するか、コストなどの制約がある場合にどの要求を優先するかなどといった状況の意志決定に用いることができます。

機能要求／非機能要求
要求が機能についての要求なのかどうかという観点で分類します。機能要求の場合はソフトウェアが備えるべき能力を、非機能要求の場合はソフトウェアが備えていなければならない品質、コスト、納期といった制約事項を明確にします。

発生源
要求がどの組織から、もしくは誰から発生したものかという観点で分類します。発生源で分類することで、要求の妥当性確認や要求に変更が発生した場合の合意形成の相手を明確にしておくことができます。

対象範囲
要求がシステム全体に対するものなのか、一部のサブシステムに対するものなのかといった観点で分類します。これにより、要求変更が発生した場合の影響範囲を明確にすることができます。

変更可能性
要求が安定しているのか、容易に変わってしまうのかという観点で分類します。要求変更に対するリスク管理を行うために用います。


3-2-2. 要求の確認
各要求に対して、以下の５つの項目を確認します。

要求の必要性
不必要な要求が混じっていないかどうかを確認します。顧客が言っているから必要、既存のシステムにあるからその機能が必要と考えるのではなく、顧客のビジネス上の戦略的、戦術的な目標の実現に貢献するかどうかといった観点から、必要性を確認しましょう。

要求間の類似性
互いに重複している要求同士がないかどうかを確認します。重複しているものがある場合はそれらをまとめて最適化します。

要求間の一貫性
互いに矛盾した要求がないかどうかを確認します。矛盾した要求がある場合は、要求の優先度や制約条件(コストや納期など)を考慮して矛盾を解決する必要があります。

要求の完全性
必要な要求が全て抽出されていることを確認します。

要求の実現可能性
技術的に開発可能かどうか、必要な経費や開発期間、開発要員要求が確保できているかといった観点から、現実的に実現できるものであることを確認します。


3-3. 合意形成
合意形成では、要求分析の結果を顧客に提示し、顧客と合意を形成します。
要求仕様書を作成する前に、一度顧客との合意を形成しておくことで、要求仕様化後の大きな手戻りを防止するのが目的です。


3-4. 要求の仕様化
要求の仕様化では、要求分析の結果をもとに、顧客が理解できるように要求仕様を文書化します。本ガイドでは、IEEE830の要求仕様の構成に従って、要求仕様書を作成することを推奨します。

要求仕様書の構成
●	目次
●	第1章 はじめに
○	1-1 目的
要求仕様書の目的を説明し、対象読者を明らかにします。
○	1-2 範囲
ソフトウェアの名称、ソフトウェアが何を実行し、何を実行しないのか、ソフトウェアの利点、目的、目標などについて説明します。
○	1-3  用語定義
要求仕様書を正しく理解するために必要となる用語や略語を定義します。分量が多い場合は、付録や別資料にまとめることを検討してください。
○	1-4 参考文献
要求仕様書の中で参照している文書があれば、それらの題名、著者名、発行機関、発行日付などを記述します。
○	1-5 概要
要求仕様書の全体的な構成を説明します。
●	第2章 要求仕様の一般的な説明
○	2-1 製品の背景
ソフトウェアが独立したシステムなのか、大きなシステムの一部なのかを記述します。また、システムの一部の場合は、システムと開発対象ソフトウェアのインターフェースを規定します。
○	2-2 製品機能
ソフトウェアの主要機能の概要を記述します。機能の一覧や機能間の関連を説明する図などを作成し、誰でも簡単に理解できるように留意しましょう。
○	2-3 ユーザー特性
想定しているユーザーの専門知識や経験などを記述します。
○	2-4 制約
開発言語やハードウェア的な制約、他アプリケーションとの連携、セキュリティ、監査機能など、開発する上での制約事項を記述します。
○	2-5 仮定および依存性
要求仕様書で述べている要求項目に影響を及ぼす要因(その仮定が覆ると、要求そのものが影響を受けるようなもの)を記述し、その要因と影響を受ける要求項目の依存関係を明確にします。
○	延期要求
次期バージョンまで実現が延期される可能性のある要求を記述します。
●	第3章 要求仕様の具体的な説明
ここの章では、全ての要求を具体的に記述します。最低限、ソフトウェアへの入力とそれに対応する出力、そしてこれらの入力によって実行される機能について説明しておく必要があります。また、要求仕様書は顧客との合意形成に使われるので、読みやすく、わかりやすい記述になるように留意しましょう。
○	3-1 外部インターフェース
ユーザーインターフェース、ハードウェアインターフェース、ソフトウェアインターフェース(他アプリケーションとのインターフェース)、通信インターフェースについて、入力と出力の詳細な説明を記述します。
○	3-2 機能
入力データを受け付けて、データを出力するまでに行う、ソフトウェアの基本的な動作を記述します。
○	3-3 性能要求
同時接続ユーザー数、正常時/ピーク負荷条件での一定時間内のトランザクション数、タスク数、処理すべきデータ量などを数値として記述する。例えば「操作者はトランザクションが完了するまで待たされないようにする」ではなく、「トランザクションの95%は1秒以内に終了する」のように書きましょう。
○	3-4 論理データベース要求
データベースに保存されるデータに対して、使用頻度やデータの制約、データ保持期間などの論理的な要求を記述します。
○	3-5 設計の制約
準拠すべき標準や法制度などによって影響を受ける設計上の制約を明記します。
○	3-6 ソフトウェアの属性
信頼性、可用性、機密性、保守容易性、移植可能性といった、ソフトウェアの属性要求を明記します。試験の段階で、これらの要求が達成されたことを客観的に検証可能にすることが目的です。
●	第4章 付録
必要に応じて、要求仕様書の内容を補足する事項を記述します。
●	索引


3-5. 試験計画の作成
試験計画の作成では、要求仕様から試験すべき内容を洗い出し、試験計画を作成します。
要求仕様書の「3-1 外部インターフェース」、「3-2 機能」、「3-3 性能要求」、「3-6 ソフトウェアの属性」で、ソフトウェアの入出力、基本動作、性能に対する数値目標、その他ソフトウェアが満たすべき属性が定められています。これらの節を中心にして、試験すべき内容を洗い出し、試験計画を作ります。

3-6. 要求仕様の確定
要求仕様の確定では、要求仕様書と試験計画を顧客に提示して合意を形成し、要求仕様を確定します。
要求仕様について合意が得られなかった場合は、その原因が要求確認の誤りなのか、要求分析の誤りなのか、要求の仕様化の誤りなのかを特定し、適切なプロセスに戻って誤りを修正しましょう。
