４．生産
============

- 仕様書を作ろう

　当り前のようですが仕様書を作りましょう。この仕様書がないことで、後になって困
ることが多々出てきます。顧客との合意を取る上でも重要な書類になります。

　■段階的詳細化
　　・本書では、アジャイル開発を推奨しています。基幹部分、操作部分、UI部分と、
　　　より複雑で、システムの根幹となるところを早い段階で作成し、操作、UIといっ
　　　た変更の多いユーザビリティー部分を後に回しています。
　■仕様書も段階的詳細化
　　・プログラムの段階的詳細化に伴い、仕様書も段階的に詳細化します。プロジェク
ト開始時点での負荷の軽減と、開始後の手戻り工数増加を防ぐのが目的です。
　　・仕様書はイテレートやマイルストーンに合わせて版数管理します。
　　　（作成しているプログラムもイテレートやマイルストーンの版数と同期させます）
　■WBSと連動する
　　・仕様書で各機能が決まった段階で、WBSに登録します。

APアーキテクチャの基準を作ろう

　AP（アプリケーション）を作成する前に必ず、アーキテクチャの基準を作り、その基
準に従いましょう。
　
　■構成図を作る
　　・OS、ミドルウェア、ドライバーなど、機能実現を可視化する目的としても重要です。
　　　（記載しているもの以外、使用はしてはいけない）
　■使用するパッケージ一覧を作る
　　・他のパッケージや、他のアプリケーション、オープンソースを使用する場合、そ
れらについても記載することは重要です。
（記載しているもの以外、使用してはいけない）
　■メモリ確保、解放を対にする
　　・メモリ確保が必要な処理を記載する場合、必ず、確保と解放を先に書いてから、そ
　　　の中の処理を書くようにすると漏れやぬけがなくなります。また処理途中で抜け
る道ができないように、出口を一つにしましょう。
　■ログを出す機構を入れる
　　・プログラムの入口、出口、あるいは処理単位、イベント受信箇所、メモリ確保、解
　　　放など、キーになる処理で最初からログを入れておき、処理を目視で確認できるよ
うにしておくと、バグ発生時の原因調査に有効です。
　　・ログは、デバッグモジュールでのみ動作するようにしておきます。

- コーディング規約を作ろう

　プログラミングする上で、コーディング規約は必ず作っておいた方が便利です。
　本書では、言語に依存する部分は触れずにおきますが、一般的に守っておいた方が良い点を列挙します。

　■ファイル名を統一する
　　・そのプロジェクトで使用するファイル名は統一した基準で作っておくと良いでし
ょう。
　■ファイルの文字コードを統一する
　　・オフショア開発などもあるので、文字化けを防ぐ目的で統一した方が良いでしょ
う。（例：UTF-8など）
　■機能単位でモジュールを分割し、ヘッダーを記述する
　　・ヘッダーには機能の名前と説明、入力条件と出力条件、Copyright、
　　　作成日、作成者などを記述しておきます。
　■処理単位にコメントを記述する
　　・ヘッダーに書いた機能の説明と処理のコメントがMECE（ミッシー）になるように
記述します。
　■発生しうる全てのイベント（事象）について処理を記述する
　　・ここでいうイベントとは、イベントハンドラのことで、クリックやキー入力など
のユーザ操作や、他のコンピュータからのメッセージの受信など、あるオブジェ
クトに対して発生したアクションを指しています。
　　・そのプログラムの中では発生しえないと思われるイベントにも処理を記述してお
　　　くと最悪の事態を避けることができます。
　　　（Switch文などでは、必ず、Defaultを書くなど。できない場合は、システム全
　　　　体で発生するイベントを記載し、関係ない箇所は、エラーログを表示するよう
　　　　にしておくとよいでしょう）
 
イテレート毎に確認すること

　１つのイテレートには設計、製造、試験が含まれています。イテレート終了後には
そのイテレートで設計し製造したプログラムが、イテレート開始時に作成した仕様通
りであるかを確認します。

　■イテレート開始時に作成した仕様通りでない
　　・Redmineなどのツールを使い、バグとして登録します。
　　・バグとして登録する場合には、発生日、発生モジュール、重要度、優先度、担当
　　　者名、発生頻度などを記述します。
　　・受け取った担当者は、修正可能か不可能かを記述し、可能な場合には、修正予定
日を記入します。

　■イテレート開始時の仕様に加えて確認できる内容を試験する
　　・ユーザビリティや境界値、画面遷移などに明らかにおかしい部分があった場合には、
　　　バグとして登録します。仕様の修正やプログラムの修正は、次のイテレートに組
み込みます。
　　・全てのログが出ているかを確認します。プログラムが全てのルートを通っている
かは大変重要な確認項目です。出ていない場合、次のイテレートに移行しない方
が良いでしょう。（入口と出口の条件がヘッダーと一致しているか、メモリ確保、
解放が対になっているか、全てのイベントで問題ないかなどをログで確認する）


- 次工程への判定を行う

　イテレート毎の確認結果から、次工程へ進むかどうかの判定を行います。

　■修正可能なバグの場合
　　・対処をするのにスコープの変更などの影響があるのかをPMに報告します。
　　・スコープの変更が必要になった場合、日数や人員や仕様書の変更なのかをハッキ
リさせPMに報告します。
　　・報告を受けたPMはWBSに反映し、次のイテレートで対処するように調整します。
影響度が大き過ぎて、QCDを圧迫するような場合、さらに上層部に報告して、対処
を待ちます。
　■修正不可能なバグの場合
　　・メンバーはその内容を具体的にし、PMに報告します。
　　・PMは上層部に報告し、さらに顧客への報告を行い、判断を待ちます。
　■中止判定
　　・修正不可能なバグがあり、上層部や顧客と相談して、回避できない場合には中止
　　　と判断し、プロジェクトを終了させます。
　■継続する場合
　　・特に問題が発生してない場合や、不具合が回避された場合はプロジェクトを継続
します。
　　・継続にあたって、致命的不具合を直した人、仕様変更で回避した人、人員やスコ
ープの調整で回避をした人、予定より早くできて他をフォローした人などは、記録
に残し、貢献度大として評価し、成績としてつけ、プロジェクト終了時には大き
く称えましょう。
　■顧客レビューを行う
　　・１つのイテレートが終了した時点で、顧客に合意が取れる状況であれば、顧客に
　　　レビューをしてもらい、OKをもらって次工程に進むのがよいでしょう。
